pipeline {
    agent any
    parameters{
        choice(name: 'action', choices: 'create\ndestory\ndestoryekscluster', description: 'Create/Update or destory the eks cluster')
        string(name: 'region', defaultValue: 'us-east-1', description: 'Eks cluster region')
        string(name: 'cluster', defaultValue: 'demo-cluster', description: 'Eks cluster name')
    }
    enviornment{
        ACCESS_KEY = credentials('aws_access_key_id')
        SECRET_KEY = credentials('aws_secret_access_key')
    }
    stages {
        stage('Git Checkout'){
            steps {
                git branch: 'main', url: 'https://github.com/Hrudaya-github/megaproject.git'
            }
        }
        stage('eks connect'){
            steps {
                sh """
                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_access_key "$SECRET_KEY"
                    aws configure set region ""
                    aws eks --region ${params.region} update-kubeconfig --name ${params.cluster} 
                    """;
            }
        }
        stage('eks deployments'){
            when { expression { params.action == 'create'}}
            steps {
                script{
                    def apply = false
                    try{
                        input message: 'please confirm the apply to intiate the deployments', ok: 'Ready to apply the config'
                        apply = true
                    }
                    catch(error){
                        apply = false
                        CurrentBuild.result= 'UNSTABLE' 
                    }
                    if(apply){
                        sh """
                        kubectl apply -f .
                        """;
                    }
                }
            }
        }
        stage('Delete Deployments'){
            when { expression { params.action == 'destory'}}
            steps {
                script{
                    def destory = false
                    try{
                        input message: 'please confirm the delete to intiate the deployments', ok: 'Ready to delete the config'
                        destory = true
                    }
                    catch(error){
                        destory = false
                        CurrentBuild.result= 'UNSTABLE' 
                    }
                    if(destory){
                        sh """
                        kubectl delete -f .
                        """;
                    }
                }
            }
        }
    }
}